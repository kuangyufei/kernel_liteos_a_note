# Copyright (c) 2013-2019 Huawei Technologies Co., Ltd. All rights reserved.
# Copyright (c) 2020-2021 Huawei Device Co., Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("config.gni")

local_flags = [
  "-fpermissive",
  "-O2",
  "-fbuiltin",
  "-Wno-narrowing",
  "-fPIE",
  "-Wno-error",
]
if (LOSCFG_USER_TEST_SMP == "enable" ||
    (LOSCFG_USER_TEST_SMP == "default" && board_name == "hispark_taurus")) {
  local_flags += [ "-DLOSCFG_USER_TEST_SMP" ]
}

config("public_config_for_door") {
  cflags = [ "-DLOSCFG_USER_TEST_SMOKE" ]
  cflags += local_flags
  cflags_cc = cflags
}

config("public_config_for_all") {
  cflags = [
    "-DLOSCFG_USER_TEST_SMOKE",
    "-DLOSCFG_USER_TEST_FULL",
  ]
  cflags += local_flags
  cflags_cc = cflags
}

config("public_config_for_pressure") {
  cflags = [ "-DLOSCFG_USER_TEST_PRESSURE" ]
  cflags += local_flags
  cflags_cc = cflags
}

# Note: The execution time of a single XXX_door.bin cannot exceed 90 seconds.
group("unittest") {
  deps = []
  if (ohos_build_type == "debug") {
    # basic test
    if (LOSCFG_USER_TEST_BASIC == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "basic:liteos_a_basic_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "basic:liteos_a_basic_unittest" ]
      }
    }

    # drivers test
    if (LOSCFG_USER_TEST_DRIVERS == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "drivers:liteos_a_drivers_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "drivers:liteos_a_drivers_unittest" ]
      }
    }

    # extended test
    if (LOSCFG_USER_TEST_EXTENDED == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "extended:liteos_a_extended_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "extended:liteos_a_extended_unittest" ]
      }
    }

    # fs test
    if (LOSCFG_USER_TEST_FS == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "fs:liteos_a_fs_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "fs:liteos_a_fs_unittest" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_HIGH) {
        deps += [ "fs:liteos_a_fs_unittest_pressure" ]
      }
    }

    # libc test
    if (LOSCFG_USER_TEST_LIBC == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "libc:liteos_a_libc_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "libc:liteos_a_libc_unittest" ]
      }
    }

    # net test
    if (LOSCFG_USER_TEST_NET == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "net:liteos_a_net_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "net:liteos_a_net_unittest" ]
      }
    }

    # process test
    if (LOSCFG_USER_TEST_PROCESS_THREAD == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "process/basic:liteos_a_process_basic_unittest_door" ]
        deps += [ "process/lock:liteos_a_process_lock_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "process/basic:liteos_a_process_basic_unittest" ]
        deps += [ "process/lock:liteos_a_process_lock_unittest" ]
      }
    }

    # security test
    if (LOSCFG_USER_TEST_SECURITY == true) {
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_LOW) {
        deps += [ "security:liteos_a_security_unittest_door" ]
      }
      if (LOSCFG_USER_TEST_LEVEL >= TEST_LEVEL_MIDDLE) {
        deps += [ "security:liteos_a_security_unittest" ]
      }
    }
  }
}
